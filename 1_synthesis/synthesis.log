
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.50 (git sha1 b5170e139, clang++ 18.1.3 -fPIC -O3)

-- Executing script file `synth.ys' --

1. Executing Verilog-2005 frontend: ../0_pre_synthesis/alu.sv
Parsing SystemVerilog input from `../0_pre_synthesis/alu.sv' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

2. Executing Liberty frontend: ../NanGate45/lib/NangateOpenCellLibrary_typical.lib
Imported 135 cell types from liberty file.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \alu

3.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

4. Executing FLATTEN pass (flatten design).

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../0_pre_synthesis/alu.sv:92$14 in module alu.
Marked 1 switch rules as full_case in process $proc$../0_pre_synthesis/alu.sv:30$1 in module alu.
Removed a total of 0 dead cases.

5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 4 assignments to connections.

5.4. Executing PROC_INIT pass (extract init attributes).

5.5. Executing PROC_ARST pass (detect async resets in processes).

5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu.$proc$../0_pre_synthesis/alu.sv:92$14'.
     1/3: $0\overflow_flag[0:0]
     2/3: $0\zero_flag[0:0]
     3/3: $0\result[7:0]
Creating decoders for process `\alu.$proc$../0_pre_synthesis/alu.sv:30$1'.
     1/3: $1\next_overflow_flag[0:0]
     2/3: $1\next_result[7:0]
     3/3: $1\temp_result[8:0]

5.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\alu.\temp_result' from process `\alu.$proc$../0_pre_synthesis/alu.sv:30$1'.
No latch inferred for signal `\alu.\next_result' from process `\alu.$proc$../0_pre_synthesis/alu.sv:30$1'.
No latch inferred for signal `\alu.\next_zero_flag' from process `\alu.$proc$../0_pre_synthesis/alu.sv:30$1'.
No latch inferred for signal `\alu.\next_overflow_flag' from process `\alu.$proc$../0_pre_synthesis/alu.sv:30$1'.

5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\alu.\result' using process `\alu.$proc$../0_pre_synthesis/alu.sv:92$14'.
  created $dff cell `$procdff$55' with positive edge clock.
Creating register for signal `\alu.\zero_flag' using process `\alu.$proc$../0_pre_synthesis/alu.sv:92$14'.
  created $dff cell `$procdff$56' with positive edge clock.
Creating register for signal `\alu.\overflow_flag' using process `\alu.$proc$../0_pre_synthesis/alu.sv:92$14'.
  created $dff cell `$procdff$57' with positive edge clock.

5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\alu.$proc$../0_pre_synthesis/alu.sv:92$14'.
Removing empty process `alu.$proc$../0_pre_synthesis/alu.sv:92$14'.
Found and cleaned up 1 empty switch in `\alu.$proc$../0_pre_synthesis/alu.sv:30$1'.
Removing empty process `alu.$proc$../0_pre_synthesis/alu.sv:30$1'.
Cleaned up 2 empty switches.

5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~7 debug messages>

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/3 on $pmux $procmux$52.
    dead port 2/3 on $pmux $procmux$52.
    dead port 3/3 on $pmux $procmux$52.
Removed 3 multiplexer ports.
<suppressed ~4 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$55 ($dff) from module alu (D = \next_result, Q = \result, rval = 8'00000000).
Adding SRST signal on $procdff$56 ($dff) from module alu (D = \next_zero_flag, Q = \zero_flag, rval = 1'0).
Adding SRST signal on $procdff$57 ($dff) from module alu (D = \next_overflow_flag, Q = \overflow_flag, rval = 1'0).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 4 unused cells and 26 unused wires.
<suppressed ~6 debug messages>

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

6.9. Rerunning OPT passes. (Maybe there is more to do..)

6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

6.13. Executing OPT_DFF pass (perform DFF optimizations).

6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

6.16. Finished OPT passes. (There is nothing left to do.)

7. Executing SYNTH pass.

7.1. Executing HIERARCHY pass (managing design hierarchy).

7.1.1. Analyzing design hierarchy..
Top module:  \alu

7.1.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

7.2. Executing PROC pass (convert processes to netlists).

7.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

7.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

7.2.4. Executing PROC_INIT pass (extract init attributes).

7.2.5. Executing PROC_ARST pass (detect async resets in processes).

7.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

7.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

7.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

7.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

7.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

7.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.5. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

7.6. Executing OPT pass (performing simple optimizations).

7.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

7.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

7.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.6.6. Executing OPT_DFF pass (perform DFF optimizations).

7.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.6.9. Finished OPT passes. (There is nothing left to do.)

7.7. Executing FSM pass (extract and optimize FSM).

7.7.1. Executing FSM_DETECT pass (finding FSMs in design).

7.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.8. Executing OPT pass (performing simple optimizations).

7.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

7.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

7.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.8.6. Executing OPT_DFF pass (perform DFF optimizations).

7.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.8.9. Finished OPT passes. (There is nothing left to do.)

7.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 9) from port A of cell alu.$add$../0_pre_synthesis/alu.sv:33$2 ($add).
Removed top 1 bits (of 9) from port B of cell alu.$add$../0_pre_synthesis/alu.sv:33$2 ($add).
Removed top 1 bits (of 9) from port A of cell alu.$sub$../0_pre_synthesis/alu.sv:39$3 ($sub).
Removed top 1 bits (of 9) from port B of cell alu.$sub$../0_pre_synthesis/alu.sv:39$3 ($sub).
Removed top 6 bits (of 8) from mux cell alu.$ternary$../0_pre_synthesis/alu.sv:76$11 ($mux).
Removed top 6 bits (of 8) from mux cell alu.$ternary$../0_pre_synthesis/alu.sv:76$12 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$37_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$38_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$39_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$40_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$41_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$42_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$53_CMP0 ($eq).
Removed top 6 bits (of 8) from wire alu.$ternary$../0_pre_synthesis/alu.sv:76$11_Y.
Removed top 6 bits (of 8) from wire alu.$ternary$../0_pre_synthesis/alu.sv:76$12_Y.

7.10. Executing PEEPOPT pass (run peephole optimizers).

7.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

7.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$../0_pre_synthesis/alu.sv:33$2 ($add).
  creating $macc model for $sub$../0_pre_synthesis/alu.sv:39$3 ($sub).
  creating $alu model for $macc $sub$../0_pre_synthesis/alu.sv:39$3.
  creating $alu model for $macc $add$../0_pre_synthesis/alu.sv:33$2.
  creating $alu model for $gt$../0_pre_synthesis/alu.sv:76$9 ($gt): merged with $sub$../0_pre_synthesis/alu.sv:39$3.
  creating $alu model for $eq$../0_pre_synthesis/alu.sv:76$10 ($eq): merged with $sub$../0_pre_synthesis/alu.sv:39$3.
  creating $alu cell for $add$../0_pre_synthesis/alu.sv:33$2: $auto$alumacc.cc:495:replace_alu$63
  creating $alu cell for $sub$../0_pre_synthesis/alu.sv:39$3, $gt$../0_pre_synthesis/alu.sv:76$9, $eq$../0_pre_synthesis/alu.sv:76$10: $auto$alumacc.cc:495:replace_alu$66
  created 2 $alu and 0 $macc cells.

7.13. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module alu that may be considered for resource sharing.
  Analyzing resource sharing options for $shr$../0_pre_synthesis/alu.sv:70$8 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$38_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$../0_pre_synthesis/alu.sv:64$7 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$39_CMP.
    No candidates found.

7.14. Executing OPT pass (performing simple optimizations).

7.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

7.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

7.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

7.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.14.6. Executing OPT_DFF pass (perform DFF optimizations).

7.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

7.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.14.9. Rerunning OPT passes. (Maybe there is more to do..)

7.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

7.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

7.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.14.13. Executing OPT_DFF pass (perform DFF optimizations).

7.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.14.16. Finished OPT passes. (There is nothing left to do.)

7.15. Executing MEMORY pass.

7.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

7.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.17. Executing OPT pass (performing simple optimizations).

7.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.17.3. Executing OPT_DFF pass (perform DFF optimizations).

7.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.17.5. Finished fast OPT passes.

7.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

7.19. Executing OPT pass (performing simple optimizations).

7.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

7.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    Consolidated identical input bits for $mux cell $ternary$../0_pre_synthesis/alu.sv:76$11:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:513:run$61 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:513:run$61 [1]
      New connections: $auto$wreduce.cc:513:run$61 [0] = 1'0
  Optimizing cells in module \alu.
Performed a total of 1 changes.

7.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.19.6. Executing OPT_SHARE pass.

7.19.7. Executing OPT_DFF pass (perform DFF optimizations).

7.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

7.19.10. Rerunning OPT passes. (Maybe there is more to do..)

7.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

7.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

7.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

7.19.14. Executing OPT_SHARE pass.

7.19.15. Executing OPT_DFF pass (perform DFF optimizations).

7.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

7.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

7.19.18. Finished OPT passes. (There is nothing left to do.)

7.20. Executing TECHMAP pass (map to technology primitives).

7.20.1. Executing Verilog-2005 frontend: /home/darshith/OpenROAD-flow-scripts/tools/install/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/darshith/OpenROAD-flow-scripts/tools/install/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.20.2. Continuing TECHMAP pass.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:16279b42aacb7578dbc4491d23e007825b9fd2dc$paramod$07b7add2a98e6a8075092e1e89aa3751e6a000b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:16279b42aacb7578dbc4491d23e007825b9fd2dc$paramod$e02a20504e61ebe09eb52d686bcb6c2238e4a84f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$72f7795a18b8bd21d2def9f98cbb7d0e4ff65a7f\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.
<suppressed ~676 debug messages>

7.21. Executing OPT pass (performing simple optimizations).

7.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~78 debug messages>

7.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~147 debug messages>
Removed a total of 49 cells.

7.21.3. Executing OPT_DFF pass (perform DFF optimizations).

7.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 157 unused wires.
<suppressed ~1 debug messages>

7.21.5. Finished fast OPT passes.

7.22. Executing ABC pass (technology mapping using ABC).

7.22.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 332 gates and 353 wires to a netlist network with 20 inputs and 10 outputs.

7.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       12
ABC RESULTS:            ANDNOT cells:      123
ABC RESULTS:               MUX cells:       34
ABC RESULTS:              NAND cells:       12
ABC RESULTS:               NOR cells:       12
ABC RESULTS:               NOT cells:       10
ABC RESULTS:                OR cells:       73
ABC RESULTS:             ORNOT cells:       18
ABC RESULTS:              XNOR cells:        8
ABC RESULTS:               XOR cells:       15
ABC RESULTS:        internal signals:      323
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       10
Removing temp directory.

7.23. Executing OPT pass (performing simple optimizations).

7.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~10 debug messages>

7.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

7.23.3. Executing OPT_DFF pass (perform DFF optimizations).

7.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 1 unused cells and 129 unused wires.
<suppressed ~2 debug messages>

7.23.5. Finished fast OPT passes.

7.24. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `alu'. Setting top module to alu.

7.24.1. Analyzing design hierarchy..
Top module:  \alu

7.24.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

7.25. Printing statistics.

=== alu ===

   Number of wires:                316
   Number of wire bits:            347
   Number of public wires:          11
   Number of public wire bits:      42
   Number of ports:                  8
   Number of port bits:             32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                325
     $_ANDNOT_                     123
     $_AND_                         12
     $_MUX_                         34
     $_NAND_                        12
     $_NOR_                         12
     $_NOT_                          9
     $_ORNOT_                       18
     $_OR_                          73
     $_SDFF_PN0_                    10
     $_XNOR_                         7
     $_XOR_                         15

7.26. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

8. Executing SETUNDEF pass (replace undef values with defined constants).

9. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    \DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    unmapped dff cell: $_DFFE_PP_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

9.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
<suppressed ~8 debug messages>
Mapping DFF cells in module `\alu':
  mapped 10 $_DFF_P_ cells to \DFF_X1 cells.

10. Executing HILOMAP pass (mapping to constant drivers).

11. Executing ABC pass (technology mapping using ABC).

11.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 325 gates and 347 wires to a netlist network with 22 inputs and 10 outputs.

11.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/darshith/APR/alu-1/1_synthesis/../NanGate45/lib/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "TAPCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "OAI221_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/home/darshith/APR/alu-1/1_synthesis/../NanGate45/lib/NangateOpenCellLibrary_typical.lib" has 89 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 11 dont_use).  Time =     0.05 sec
ABC: Memory =   11.38 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:       13
ABC RESULTS:           AND3_X1 cells:        2
ABC RESULTS:         AOI211_X1 cells:       14
ABC RESULTS:          AOI21_X1 cells:       28
ABC RESULTS:         AOI221_X1 cells:        8
ABC RESULTS:          AOI22_X1 cells:        1
ABC RESULTS:            INV_X1 cells:       19
ABC RESULTS:           MUX2_X1 cells:        7
ABC RESULTS:          NAND2_X1 cells:       27
ABC RESULTS:          NAND3_X1 cells:        9
ABC RESULTS:          NAND4_X1 cells:        2
ABC RESULTS:           NOR2_X1 cells:       32
ABC RESULTS:           NOR3_X1 cells:       11
ABC RESULTS:           NOR4_X1 cells:        1
ABC RESULTS:         OAI211_X1 cells:        9
ABC RESULTS:          OAI21_X1 cells:       15
ABC RESULTS:         OAI221_X1 cells:        2
ABC RESULTS:          OAI22_X1 cells:        1
ABC RESULTS:            OR2_X1 cells:        6
ABC RESULTS:            OR3_X1 cells:        8
ABC RESULTS:            OR4_X1 cells:        1
ABC RESULTS:          XNOR2_X1 cells:        8
ABC RESULTS:           XOR2_X1 cells:        4
ABC RESULTS:        internal signals:      315
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       10
Removing temp directory.
Removed 0 unused cells and 340 unused wires.

12. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

13. Printing statistics.

=== alu ===

   Number of wires:                247
   Number of wire bits:            271
   Number of public wires:           8
   Number of public wire bits:      32
   Number of ports:                  8
   Number of port bits:             32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                239
     AND2_X1                        13
     AND3_X1                         2
     AOI211_X1                      14
     AOI21_X1                       28
     AOI221_X1                       8
     AOI22_X1                        1
     DFF_X1                         10
     INV_X1                         19
     LOGIC0_X1                       1
     MUX2_X1                         7
     NAND2_X1                       27
     NAND3_X1                        9
     NAND4_X1                        2
     NOR2_X1                        32
     NOR3_X1                        11
     NOR4_X1                         1
     OAI211_X1                       9
     OAI21_X1                       15
     OAI221_X1                       2
     OAI22_X1                        1
     OR2_X1                          6
     OR3_X1                          8
     OR4_X1                          1
     XNOR2_X1                        8
     XOR2_X1                         4

   Chip area for module '\alu': 290.472000
     of which used for sequential elements: 45.220000 (15.57%)

14. Executing Verilog backend.

14.1. Executing BMUXMAP pass.

14.2. Executing DEMUXMAP pass.
Dumping module `\alu'.

15. Executing SPICE backend.

End of script. Logfile hash: 0874033215, CPU: user 0.35s system 0.01s, MEM: 32.97 MB peak
Yosys 0.50 (git sha1 b5170e139, clang++ 18.1.3 -fPIC -O3)
Time spent: 35% 2x abc (0 sec), 11% 2x read_liberty (0 sec), ...
